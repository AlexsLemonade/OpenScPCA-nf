process {
  memory = { 4.GB * task.attempt }

  maxRetries = 2
  errorStrategy = { if (task.attempt > process.maxRetries) {
    return 'finish'
  } else {
    sleep(Math.pow(2, task.attempt) * 200 as long) // sleep to allow for transient errors
    return 'retry'
  } }
  maxErrors = '-1'


  withLabel: mem_8 {
    memory = { 8.GB * task.attempt }
  }
  withLabel: mem_16 {
    memory = { 16.GB * task.attempt }
  }
  withLabel: mem_24 {
    memory = { 24.GB * task.attempt }
  }
  withLabel: mem_32 {
    memory = { 32.GB * task.attempt }
  }
  withLabel: mem_max {
    // max memory for tasks that have failed more than twice for OOM
    // set to 2.TB, but will be reduced by process.resourceLimits
    memory = {(task.attempt > 2  && task.exitStatus in 137..140) ? 2.TB : 64.GB * task.attempt }
  }
  withLabel: cpus_2  {
    cpus = 2
  }
  withLabel: cpus_4  {
    cpus = 4
  }
  withLabel: cpus_8  {
    cpus = 8
  }
  withLabel: cpus_12 {
    cpus = 12
  }
  withLabel: cpus_24 {
    cpus = 24
  }
}
