{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "$id": "https://raw.githubusercontent.com/openscpca-nf/main/nextflow_schema.json",
  "title": "openscpca-nf pipeline parameters",
  "description": "A workflow to run modules from the OpenScPCA project.",
  "type": "object",
  "$defs": {
    "input_and_output_locations": {
      "title": "Input and Output Locations",
      "type": "object",
      "description": "",
      "default": "",
      "properties": {
        "release_bucket": {
          "type": "string",
          "default": "s3://openscpca-data-release",
          "format": "directory-path",
          "description": "Base URI for input data from OpenScPCA",
          "help_text": "Standard configurations will use an S3 bucket, but local paths can also be used."
        },
        "release_prefix": {
          "type": "string",
          "default": "2024-11-25",
          "format": "directory-path",
          "description": "Prefix for the specific release used as input"
        },
        "results_bucket": {
          "type": "string",
          "default": "s3://openscpca-nf-workflow-results-staging",
          "description": "Base URI for results output",
          "help_text": "Standard configurations will use an S3 bucket, but local paths can also be used."
        },
        "sim_bucket": {
          "type": "string",
          "default": "s3://openscpca-test-data-release-staging",
          "description": "Base URI for simulated data output",
          "help_text": "Standard configurations will use an S3 bucket, but local paths can also be used."
        },
        "project": {
          "type": "string",
          "default": "all",
          "description": "Projects that will be used in the workflow run",
          "help_text": "Default is to run all projects. To run a single project or specified projects, include them as a list of SCPCP ids, separated by commas, semicolons, or spaces.",
          "pattern": "^[aA][lL][lL]$|^(SCPCP\\d{6}([,; ]+|$))+$"
        }
      }
    },
    "module_specific_parameters": {
      "title": "Module-specific parameters",
      "type": "object",
      "description": "Parameters used by individual modules",
      "default": "",
      "properties": {
        "merge_reuse": {
          "type": "boolean",
          "description": "Whether to reuse previous merge data output"
        },
        "merge_max_libraries": {
          "type": "integer",
          "default": 75,
          "description": "Maximum number of libraries to merge into a single object"
        },
        "merge_hvg": {
          "type": "integer",
          "default": 2000,
          "description": "Number of highly variable genes to use when performing dimensionality reduction on merged objects"
        },
        "cell_type_blueprint_ref_file": {
          "type": "string",
          "default": "https://raw.githubusercontent.com/AlexsLemonade/OpenScPCA-analysis/refs/tags/v0.2.1/analyses/cell-type-consensus/references/blueprint-mapped-ontologies.tsv",
          "pattern": "\\.tsv$",
          "format": "file-path",
          "mimetype": "text/tab-separated-values",
          "description": "BlueprintEncodeData cell type reference file"
        },
        "cell_type_panglao_ref_file": {
          "type": "string",
          "default": "https://raw.githubusercontent.com/AlexsLemonade/OpenScPCA-analysis/refs/tags/v0.2.1/analyses/cell-type-consensus/references/panglao-cell-type-ontologies.tsv",
          "pattern": "\\.tsv$",
          "format": "file-path",
          "mimetype": "text/tab-separated-values",
          "description": "PanglaoDB cell type reference file"
        },
        "cell_type_consensus_ref_file": {
          "type": "string",
          "default": "https://raw.githubusercontent.com/AlexsLemonade/OpenScPCA-analysis/e4dc422dd8ddcdc89d031c289fbd123748db500c/analyses/cell-type-consensus/references/consensus-cell-type-reference.tsv",
          "pattern": "\\.tsv$",
          "format": "file-path",
          "mimetype": "text/tab-separated-values",
          "description": "Consensus cell types reference file"
        },
        "cell_type_consensus_marker_gene_ref_file": {
          "type": "string",
          "default": "https://raw.githubusercontent.com/AlexsLemonade/OpenScPCA-analysis/872fd2b8256434221512b04fac7c98140704ede3/analyses/cell-type-consensus/references/validation-markers.tsv'",
          "pattern": "\\.tsv$",
          "format": "file-path",
          "mimetype": "text/tab-separated-values",
          "description": "Table of marker genes used to validate consensus cell types"
        }
      }
    },
    "containers": {
      "title": "Containers",
      "type": "object",
      "description": "Locations for Docker images used by workflow processes",
      "default": "",
      "properties": {
        "python_container": {
          "type": "string",
          "default": "python:3.11"
        },
        "scpcatools_slim_container": {
          "type": "string",
          "default": "ghcr.io/alexslemonade/scpcatools-slim:v0.4.1"
        },
        "scpcatools_reports_container": {
          "type": "string",
          "default": "ghcr.io/alexslemonade/scpcatools-reports:v0.4.1"
        },
        "scpcatools_anndata_container": {
          "type": "string",
          "default": "ghcr.io/alexslemonade/scpcatools-anndata:v0.4.1"
        },
        "simulate_sce_container": {
          "type": "string",
          "default": "public.ecr.aws/openscpca/simulate-sce:v0.2.1"
        },
        "doublet_detection_container": {
          "type": "string",
          "default": "public.ecr.aws/openscpca/doublet-detection:v0.2.1"
        },
        "seurat_conversion_container": {
          "type": "string",
          "default": "public.ecr.aws/openscpca/seurat-conversion:v0.2.1"
        },
        "consensus_cell_type_container": {
          "type": "string",
          "default": "public.ecr.aws/openscpca/cell-type-consensus:latest"
        }
      }
    }
  },
  "allOf": [
    {
      "$ref": "#/$defs/input_and_output_locations"
    },
    {
      "$ref": "#/$defs/module_specific_parameters"
    },
    {
      "$ref": "#/$defs/containers"
    }
  ]
}
